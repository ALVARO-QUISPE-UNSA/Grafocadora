PUT
  Tiene vtxKey la llave de v1?
    Si
      Fijar en la lista el valor n con sus vertices
    No
      asignar el la llave de vertice.
      actualizar valores de distancias con todos los vértices anteriores
  lo mismo para v2.

  matrix.get(hash(v1)).get(hash(v2)) = int 
  matrix.get(hash(v2)).get(hash(v1)) = int 


add new vertex in adj matrix
  -
  for i -> key.size()
    matrix.add new list
    for j -> key.size()
      matrix.get(i).add(default)

  matrix(v).(v) = 0
    
  
print 
  print "v + tab"
  for (j -> hash.set()) 
    print j + tab
  print \n
  for (i -> hash.set)
    print i + tab
    for (j -> hash.set)
      print matrix(i)(j) + tab
    print \n
    
    
    

dijkstra (grafo g, String v1, vf)
  Primero escojes el vértice inicial
  Ese vértice lo añades al conjunto S
  Estableces los valores temporales de cada vértice adyacente
?  Guardas el camino de esos v.temporaes
  Iteras por todos esos valores
    Escojes el camino más corto
    añades ese camino al grupo S
    repites si el vtx no es la llegada

  listAdj = copiar ListAdj      //copia de original
  hashMap f                     //pesos finales
  hashMap t                     //pesos temporales 
  hashMap c                     //caminos de vi a vn
  f.add (v1, 0)                  //añades vertice inicial con 0
  String vi = v1;
  int mm;
  while (vi != vf) {            //Hasta que no se anñada el vtx final
    mm = 2147483647;
    for (listAdj vn de vi) {
      adjlist.get (vtxkey.get(vn)).remove(vi);  //eliminar el v anterior de la adyacencia
      int w = f.get(vi) + pesovtx(vn, vi);
      if (vn no está en hash t) t.add(vn, w)
      else if (w < t.get(vn))        //Si peso act es <, se cambia
        hashMap c.put (vn, vi)
        hashMap t.put(vn, w)
    }
    for (String k : hash t)
      if (t.get(k) < mm)
        mm = t.get(k)
        vi = k
    hash f.put(vi, hash t.get(vi))
    hash t.remove(vi)
  }
   
